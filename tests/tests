#! /bin/sh

# Preparation
# make sure you have the following command line programs:
# jq
# uuidgen


# Steps to run the tests
# setup and run the firestore emulator in a different shell
# execute ./tests
# or, alternativelt, run specific tests with ./tests -- nameoffirsttest nameofsecondtest


oneTimeSetUp() {
    export FIRESTORE_EMULATOR_HOST=${FIRESTORE_EMULATOR_HOST:=localhost:8080}
    echo "Running tests againt ${FIRESTORE_EMULATOR_HOST}. (make sure firestore emulator is running)."
    # rebuild the executable to make sure tests match the latest source code
    go build -o ../fuego  ..
    sleep 1
}

setUp() {
    TEST_COLLECTION=tests-`uuidgen`
		TEST_COLLECTION_2=tests-`uuidgen`
    echo "Testing with collection ${TEST_COLLECTION}"
}

oneTimeTearDown() {
    echo "DONE"
}

testAddSetReadDeleteDocument() {
    # Adding...
    expectedValue="string1"
    id=$(../fuego add ${TEST_COLLECTION} "{\"level1\": \"${expectedValue}\"}") || fail "Failed to add document"
    result=$(../fuego get ${TEST_COLLECTION} ${id} | jq ".level1")
    assertEquals "Failed to read added value" "\"${expectedValue}\"" "${result}"

    # Setting...
    expectedValue="string2"
    ../fuego set ${TEST_COLLECTION} ${id} "{\"level1\": \"${expectedValue}\"}" || fail "Failed to set document"
    result=$(../fuego get ${TEST_COLLECTION} ${id} | jq ".level1")
    assertEquals "Failed to read set value" "\"${expectedValue}\"" "${result}"

		# Also test reading using document-path
    result=$(../fuego get ${TEST_COLLECTION}/${id} | jq ".level1")
    assertEquals "Failed to read set value" "\"${expectedValue}\"" "${result}"

		# And deleting...
		../fuego delete ${TEST_COLLECTION} ${id}
		assertFalse "Should not have read deleted value" "../fuego get ${TEST_COLLECTION} ${id}"
}

testGetAllDocuments() {
    # Adding...
    expectedValue1="string1"
    expectedValue2="string2"
    id1=$(../fuego add ${TEST_COLLECTION} "{\"level1\": \"${expectedValue1}\"}") || fail "Failed to add document"
    id2=$(../fuego add ${TEST_COLLECTION} "{\"level1\": \"${expectedValue2}\"}") || fail "Failed to add document"
    result=$(../fuego getall ${TEST_COLLECTION} ${id1} ${id2} | jq -r '.[].level1'| tr '\n' ' ')
    assertEquals "Failed to read all added value" "${expectedValue1} ${expectedValue2} " "${result}"
}

testDeleteAllDocuments() {
    # Adding...
    expectedValue1="string1"
    expectedValue2="string2"
    id1=$(../fuego add ${TEST_COLLECTION} "{\"level1\": \"${expectedValue1}\"}") || fail "Failed to add document"
    id2=$(../fuego add ${TEST_COLLECTION} "{\"level1\": \"${expectedValue2}\"}") || fail "Failed to add document"
    result=$(../fuego deleteall ${TEST_COLLECTION} ${id1} ${id2} | jq -r '.[].level1'| tr '\n' ' ')
    result=$(../fuego getall ${TEST_COLLECTION} ${id1} ${id2} | jq -r '.[].level1'| tr '\n' ' ')
    assertEquals "Failed to read all added value" "" "${result}"
}

testUpdatingDocument(){
    # add a new document
    id=$(../fuego add ${TEST_COLLECTION} "{\"level1\": \"value\"}") || fail "Failed to add document"

    # add a new field using document path
    ../fuego set --merge ${TEST_COLLECTION}/${id} "{\"version\": 2}" || fail "Failed to add document"
    result=$(../fuego get ${TEST_COLLECTION} ${id} | jq .)
    expectedValue=$(echo {\"level1\": \"value\", \"version\": 2} | jq .)
    assertEquals "Failed to update new fields" "${expectedValue}" "${result}"

    # overwrite existing field
    ../fuego set --merge ${TEST_COLLECTION} ${id} "{\"version\": 15}" || fail "Failed to add document"
    result=$(../fuego get ${TEST_COLLECTION} ${id} | jq .)
    expectedValue=$(echo {\"level1\": \"value\", \"version\": 15} | jq .)
    assertEquals "Failed to update existing fields" "${expectedValue}" "${result}"
}

testUpdatingDeepDocument(){
    # add a new document
    id=$(../fuego add ${TEST_COLLECTION} "{\"base\": \"value\"}") || fail "Failed to add document"

    # add a new field
    ../fuego set --merge ${TEST_COLLECTION} ${id} "{\"level1\": {\"level2\": {\"level3\": {\"level4\": \"value\"}}}}" || fail "Failed to add document"
    result=$(../fuego get ${TEST_COLLECTION} ${id} | jq .)
    expectedValue=$(echo {\"base\": \"value\", \"level1\": {\"level2\": {\"level3\": {\"level4\": \"value\"}}}} | jq .)
    assertEquals "Failed to update deeply nested field fields" "${expectedValue}" "${result}"
}

testQueryKeys(){
    # Query integer value on first level key
    id=$(../fuego add ${TEST_COLLECTION} "{\" \": 1, \"level1\": 1, \"level2root\": {\"number\": 1}}") || fail "Failed to add document"
    result=$(../fuego query ${TEST_COLLECTION} "level1 == 1" | jq ".[0].ID")
    assertEquals "Failed to query integer on first level key" "\"${id}\"" "$result"

    # Query integer value on second level key
    result=$(../fuego query ${TEST_COLLECTION} "level2root.number == 1" | jq ".[0].ID")
    assertEquals "Failed to query integer on second level key" "\"${id}\"" "$result"

    # Query integer on empty key using string as key
    result=$(../fuego query ${TEST_COLLECTION} "\" \" == 1" | jq ".[0].ID")
    assertEquals "Failed to query value on empty key" "\"${id}\"" "$result"

	# Combine quoting and non quoting parts of a key
    result=$(../fuego query ${TEST_COLLECTION} "\"level2root\".number == 1" | jq ".[0].ID")
    assertEquals "Failed to query value combining quoting and non quoting parts of a key" "\"${id}\"" "$result"
}

testQueryWithSelect(){
    ../fuego add ${TEST_COLLECTION} "{\"p1\": 1, \"p2\": {\"number\": 1, \"string\":\"blah\"}}"
    result=$(../fuego query --select p1 --select '"p2".number' ${TEST_COLLECTION} "p1 == 1" | jq -c ".[0].Data")
    assertEquals "Failed to select properties" "{\"p1\":1,\"p2\":{\"number\":1}}" "${result}" 
}

testGroupQuery() {
		../fuego set ${TEST_COLLECTION}/doc1/${TEST_COLLECTION_2}/doc1_1 '{}'
		../fuego set ${TEST_COLLECTION}/doc1/${TEST_COLLECTION_2}/doc1_2 '{}'
		../fuego set ${TEST_COLLECTION}/doc2/${TEST_COLLECTION_2}/doc2_1 '{}'
		../fuego set ${TEST_COLLECTION}/doc2/${TEST_COLLECTION_2}/doc2_2 '{}'
		result=$(../fuego query -g ${TEST_COLLECTION_2} | jq '. | length')
		assertEquals "Failed to query group collection" "4" "${result}"
}

testQueryDifferentValueTypes(){
    # Query integer value
    id=$(../fuego add --ts ${TEST_COLLECTION} "{\"number\": 1, \"timestamp\": \"2019-02-26T02:39:44.458Z\", \"string\": \"string1\", \"bool\": true, \"array\": [1, 2, 3]}") || fail "Failed to add document"

		# equality
    result=$(../fuego query ${TEST_COLLECTION} "number == 1" | jq ".[0].ID")
    assertEquals "Failed to query integer on value" "\"${id}\"" "$result"

    # Add and query timestamp
    result=$(../fuego query ${TEST_COLLECTION} "timestamp == 2019-02-26T02:39:44.458Z" | jq ".[0].ID")
    assertEquals "Failed to query timestamp" "\"${id}\"" "$result"

    # query string double quote
    result=$(../fuego query ${TEST_COLLECTION} "string == \"string1\"" | jq ".[0].ID")
    assertEquals "Failed to query timestamp" "\"${id}\"" "$result"

    # query string dsingle quote
    result=$(../fuego query ${TEST_COLLECTION} "string == 'string1'" | jq ".[0].ID")
    assertEquals "Failed to query timestamp" "\"${id}\"" "$result"

    # query bool
    result=$(../fuego query ${TEST_COLLECTION} "bool == true" | jq ".[0].ID")
    assertEquals "Failed to query timestamp" "\"${id}\"" "$result"

		# in
		result=$(../fuego query ${TEST_COLLECTION} "number in [1 2 3]" | jq ".[0].ID")
    assertEquals "Failed to query integer on value" "\"${id}\"" "$result"

		# array-contains
		result=$(../fuego query ${TEST_COLLECTION} "array array-contains 1" | jq ".[0].ID")
    assertEquals "Failed to query integer on value" "\"${id}\"" "$result"

		# array-contains-any
		result=$(../fuego query ${TEST_COLLECTION} "array array-contains-any [1]" | jq ".[0].ID")
    assertEquals "Failed to query integer on value" "\"${id}\"" "$result"
}


testQueryInequality(){
    # query bigger than
    for i in $(seq 1 3); do
        ../fuego add ${TEST_COLLECTION} "{\"level1\": {\"level2\": $i}}"
    done

    result=$(../fuego query ${TEST_COLLECTION} "level1.level2 > 2" | jq "length")
    assertEquals "Failed to query >" "1" "$result"

    # less than or equal
    result=$(../fuego query ${TEST_COLLECTION} "level1.level2 <= 2" | jq "length")
    assertEquals "Failed to query <=" "2" "$result"
}

testCompoundQuery(){
    ../fuego add ${TEST_COLLECTION} "{\"key1\": \"key1\", \"key2\": 2}" || fail "Failed to add document"
    ../fuego add ${TEST_COLLECTION} "{\"key1\": \"whatever\", \"key2\": 2}" || fail "Failed to add document"

    # query first on a single field
    result=$(../fuego query ${TEST_COLLECTION} "key2 == 2" | jq "length")
    assertEquals "Failed to query on a single key" "2" "$result"


    # query first on two fields
    result=$(../fuego query ${TEST_COLLECTION} "key2 == 2" "key1 == \"key1\"" | jq "length")
    assertEquals "Failed to query on two keys" "1" "$result"

    # query on two fields, that fail
    result=$(../fuego query ${TEST_COLLECTION} "key2 == 1" "key1 == \"key1\"")
    assertEquals "Failed to query on two keys" "" "$result"

}

testQueryBatched(){
    # this unittest is testing several aspects to only need to create the bigger collection once (reduce test runtime)

    # create 50 items in parallel
    seq 50 | xargs -I@ -P 50 ../fuego add ${TEST_COLLECTION} '{"id": @}' > /dev/null

    # make sure we receive exactly limit entries
    result=$(../fuego query --limit 25 --batch 10 ${TEST_COLLECTION}  | jq "length" )
    assertEquals "Failed to query in batches" "25" "$result"

    # make sure we receive exactly limit entries
    result=$(../fuego query --limit 100 --batch 200 ${TEST_COLLECTION}  | jq "length" )
    assertEquals "Failed to query in batches" "50" "$result"

    # make sure ordering is still working
    # as we have the documents with id 1..50 the 15th item will have value 16
    result=$(../fuego query --limit 20 --batch 5 --orderby id --orderdir ASC ${TEST_COLLECTION}  | jq -c ".[15].Data.id"  )
    assertEquals "Failed to query in batches" "16" "$result"
}


testOrderAndPagination(){
    r1=$(../fuego add ${TEST_COLLECTION} "{\"level1\": {\"level2\": 1}}")
    r2=$(../fuego add ${TEST_COLLECTION} "{\"level1\": {\"level2\": 2}}")
    r3=$(../fuego add ${TEST_COLLECTION} "{\"level1\": {\"level2\": 3}}")

    # limit 1 result
    result=$(../fuego query --limit 1 ${TEST_COLLECTION}  | jq "length")
    assertEquals "Failed to set a limit" "1" "$result"

    # order ASC
    result=$(../fuego query --limit 1 --orderby 'level1.level2' --orderdir ASC ${TEST_COLLECTION}  | jq ".[0].Data.level1.level2")
    assertEquals "Failed to order ASC" "1" "$result"

    # order DESC
    result=$(../fuego query --limit 1 --orderby 'level1.level2' --orderdir DESC ${TEST_COLLECTION}  | jq ".[0].Data.level1.level2")
    assertEquals "Failed to order DESC" "3" "$result"

    # Start at
    result=$(../fuego query --limit 1 --orderby 'level1.level2' --orderdir DESC --startat ${r2} ${TEST_COLLECTION}  | jq ".[0].ID")
    assertEquals "startat failed" "$result" "\"$r2\""

		# Start at using document path
		result=$(../fuego query --limit 1 --orderby 'level1.level2' --orderdir DESC --startat ${TEST_COLLECTION}/${r2} ${TEST_COLLECTION}  | jq ".[0].ID")
    assertEquals "startat failed" "$result" "\"$r2\""

    # Start after
		result=$(../fuego query --limit 1 --orderby 'level1.level2' --orderdir DESC --startafter ${r2} ${TEST_COLLECTION}  | jq ".[0].ID")
    assertEquals "startat failed" "$result" "\"$r1\""

		# Start after using document path
    result=$(../fuego query --limit 1 --orderby 'level1.level2' --orderdir DESC --startafter ${TEST_COLLECTION}/${r2} ${TEST_COLLECTION}  | jq ".[0].ID")
    assertEquals "startat failed" "$result" "\"$r1\""

    # End at
    result=$(../fuego query --orderby 'level1.level2' --orderdir DESC --endat ${r2} ${TEST_COLLECTION}  | jq "length")
    assertEquals "endat failed" "2" "$result"

		# End at using document path
    result=$(../fuego query --orderby 'level1.level2' --orderdir DESC --endat ${TEST_COLLECTION}/${r2} ${TEST_COLLECTION}  | jq "length")
    assertEquals "endat failed" "2" "$result"

    # End before
    result=$(../fuego query --orderby 'level1.level2' --orderdir DESC --endbefore ${r2} ${TEST_COLLECTION}  | jq "length")
    assertEquals "endbefore failed" "1" "$result"

		# End before using document path
    result=$(../fuego query --orderby 'level1.level2' --orderdir DESC --endbefore ${TEST_COLLECTION}/${r2} ${TEST_COLLECTION}  | jq "length")
    assertEquals "endbefore failed" "1" "$result"
}

testParsingFieldPaths(){
    r1=$(../fuego add ${TEST_COLLECTION} "{\"le.vel1\": {\" level2 \": 1, \"a\": 1}}")
    r2=$(../fuego add ${TEST_COLLECTION} "{\"le.vel1\": {\" level2 \": 2, \"a\": 2}}")
    r3=$(../fuego add ${TEST_COLLECTION} "{\"le.vel1\": {\" level2 \": 3, \"a\": 3}}")

    # order ASC
    result=$(../fuego query --select "\"le.vel1\".' level2 '" --limit 1 --orderby "\"le.vel1\".' level2 '" --orderdir ASC ${TEST_COLLECTION}  | jq -c ".[0].Data" )
    assertEquals "Failed to query parsing difficult field paths" "{\"le.vel1\":{\" level2 \":1}}" "$result"

}

testCopyDocumentAndCollection(){
    # add a new document
    id=$(../fuego add ${TEST_COLLECTION} "{\"base\": \"value\"}") || fail "Failed to add document"
    subDocId1=$(../fuego add "${TEST_COLLECTION}/${id}/subCollection1" "{\"base\": \"sub value1\"}") || fail "Failed to add document"
    subDocId2=$(../fuego add "${TEST_COLLECTION}/${id}/subCollection2" "{\"base\": \"sub value2\"}") || fail "Failed to add document"
    echo ${id} ${subDocId1} ${subDocId2}
    targetDocumentPath=${TEST_COLLECTION}/$(uuidgen)
    targetCollectionPath=$(uuidgen)

    ../fuego copy "${TEST_COLLECTION}/${id}" ${targetDocumentPath} --overwrite
    ../fuego copy "${TEST_COLLECTION}" ${targetCollectionPath} --overwrite

    # query copied document
    result=$(../fuego get ${targetDocumentPath} | jq .)
    expectedValue=$(echo {\"base\": \"value\"} | jq .)
    assertEquals "Failed to copy document" "${expectedValue}" "${result}"

    result=$(../fuego get "${targetDocumentPath}/subCollection1/${subDocId1}" | jq .)
    expectedValue=$(echo {\"base\": \"sub value1\"} | jq .)
    assertEquals "Failed to copy document" "${expectedValue}" "${result}"

    result=$(../fuego get "${targetDocumentPath}/subCollection2/${subDocId2}" | jq .)
    expectedValue=$(echo {\"base\": \"sub value2\"} | jq .)
    assertEquals "Failed to copy document" "${expectedValue}" "${result}"

    # query copied collection
    result=$(../fuego get "${targetCollectionPath}/${id}" | jq .)
    expectedValue=$(echo {\"base\": \"value\"} | jq .)
    assertEquals "Failed to copy document" "${expectedValue}" "${result}"

    result=$(../fuego get "${targetCollectionPath}/${id}/subCollection1/${subDocId1}" | jq .)
    expectedValue=$(echo {\"base\": \"sub value1\"} | jq .)
    assertEquals "Failed to copy document" "${expectedValue}" "${result}"

    result=$(../fuego get "${targetCollectionPath}/${id}/subCollection2/${subDocId2}" | jq .)
    expectedValue=$(echo {\"base\": \"sub value2\"} | jq .)
    assertEquals "Failed to copy document" "${expectedValue}" "${result}"
}


# Load shUnit2.
. ./shunit2

}
